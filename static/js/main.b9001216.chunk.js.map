{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","handleSortType","isReversed","handleReverse","prepareGoods","goods","visibleGoods","sort","prevGood","nextGood","LENGTH","length","ALPABET","localeCompare","reverse","getReorderedGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAuB,WAClC,MAAmCC,mBAASH,EAASI,MAArD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAOMC,EAnCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAiBzB,OAfAC,EAAaC,MAAK,SAACC,EAAUC,GAC3B,OAAQT,GACN,KAAKL,EAASe,OACZ,OAAOF,EAASG,OAASF,EAASE,OACpC,KAAKhB,EAASiB,QACZ,OAAOJ,EAASK,cAAcJ,GAChC,QACE,OAAO,MAITP,GACFI,EAAaQ,UAGRR,EAeHS,CAAkBnB,EAAiB,CAAEM,aAAYF,aAErD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEhB,IAAaL,EAASiB,QAClB,0BACA,iBAENM,QAAS,kBAAMjB,EAAeN,EAASiB,UAPzC,iCAYA,wBACEK,KAAK,SACLD,UACEhB,IAAaL,EAASe,OAClB,6BACA,oBAENQ,QAAS,kBAAMjB,EAAeN,EAASe,SAPzC,4BAYA,wBACEO,KAAK,SACLD,WACiB,IAAfd,EACI,6BACA,oBAENgB,QAAS,kBAAMf,GAA6B,IAAfD,IAP/B,sBAYEF,IAAaL,EAASI,OAAuB,IAAfG,IAE5B,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAnDnBjB,EAAeN,EAASI,WACxBI,GAAc,IA+CN,sBAUN,6BACE,6BACGC,EACEe,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAAoBA,eCrH7CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b9001216.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((prevGood, nextGood) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return prevGood.length - nextGood.length;\n      case SortType.ALPABET:\n        return prevGood.localeCompare(nextGood);\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype Props = {};\n\nexport const App: React.FC<Props> = () => {\n  const [sortType, handleSortType] = useState(SortType.NONE);\n  const [isReversed, handleReverse] = useState(false);\n\n  const reset = () => {\n    handleSortType(SortType.NONE);\n    handleReverse(false);\n  };\n\n  const prepareGoods\n    = getReorderedGoods(goodsFromServer, { isReversed, sortType });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            sortType !== SortType.ALPABET\n              ? 'button is-info is-light'\n              : 'button is-info'\n          }\n          onClick={() => handleSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            sortType !== SortType.LENGTH\n              ? 'button is-success is-light'\n              : 'button is-success'\n          }\n          onClick={() => handleSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            isReversed !== true\n              ? 'button is-warning is-light'\n              : 'button is-warning'\n          }\n          onClick={() => handleReverse(isReversed !== true)}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed === true)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => reset()}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {prepareGoods\n            .map(good => <li data-cy=\"Good\">{good}</li>)}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}